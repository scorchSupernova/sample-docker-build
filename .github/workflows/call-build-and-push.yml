name: Build and Push Base Windows C++ Image

on:
  workflow_call:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build Base Docker Image
        run: docker build -t saidursajol/my-base-windows-cpp-image-project:latest .

      - name: Extract Release64 folder from Docker image
        run: |
          # Create a temporary directory
          $tempDir = New-Item -ItemType Directory -Path "$env:TEMP\Release64" -Force
          
          # Verify tempDir creation
          if (-Not (Test-Path $tempDir.FullName)) {
              Write-Host "Temporary directory was not created."
              exit 1
          }

          # Verify the image name
          $imageName = "saidursajol/my-base-windows-cpp-image-project:latest"
          Write-Host "Using Docker image: $imageName"
          
          # Run the Docker command directly
          docker run --rm -v "$($tempDir.FullName):C:\output" $imageName powershell -Command "
            if (Test-Path 'C:\deploy\Release64') {
                Copy-Item 'C:\deploy\Release64\*' 'C:\output' -Recurse -Force
                Write-Host 'Files copied successfully'
            } else {
                Write-Host 'Release64 folder does not exist'
                exit 1
            }
          "

      - name: Upload updated Release64 files to VPS using WinRM (HTTP)
        run: |
          winrm set winrm/config/client '@{AllowUnencrypted="true"}'
          Set-Item WSMan:\localhost\Client\TrustedHosts -Value "${{ secrets.VPS_IP }}" -Force

          $username = "${{ secrets.VPS_USERNAME }}"
          $password = "${{ secrets.VPS_PASSWORD }}"
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)

          # Define the VPS IP and destination path on the VPS
          $vpsIp = "${{ secrets.VPS_IP }}"
          $destinationPath = "C:\\mt5-microservice-cicd"

          # Use WinRM to establish a session
          $session = New-PSSession -ComputerName $vpsIp -Credential $credential -Authentication Basic -Port 5985

          try {
              # Create the destination folder on the VPS if it does not exist
              Invoke-Command -Session $session -ScriptBlock {
                  param($destPath)
                  if (-not (Test-Path $destPath)) {
                      New-Item -ItemType Directory -Path $destPath
                  }
              } -ArgumentList $destinationPath

              # Define the source path
              $sourcePath = "$env:TEMP\Release64"

              # Get list of files in the source directory
              $files = Get-ChildItem -Path $sourcePath

              foreach ($file in $files) {
                  # Check if the file exists on the VPS
                  $remoteFilePath = Join-Path -Path $destinationPath -ChildPath $file.Name
                  $needsCopy = $true

                  # Check if the file exists on the remote server
                  $fileExists = Invoke-Command -Session $session -ScriptBlock {
                      param($filePath)
                      Test-Path $filePath
                  } -ArgumentList $remoteFilePath

                  if ($fileExists) {
                      # Compare last write time
                      $remoteFileLastWriteTime = Invoke-Command -Session $session -ScriptBlock {
                          param($filePath)
                          (Get-Item $filePath).LastWriteTime
                      } -ArgumentList $remoteFilePath

                      # Check if local file is newer
                      if ($file.LastWriteTime -le $remoteFileLastWriteTime) {
                          $needsCopy = $false
                          Write-Host "File $($file.Name) is up to date."
                      }
                  }

                  # If the file is new or updated, copy it
                  if ($needsCopy) {
                      Write-Host "Copying $($file.Name) to VPS..."
                      Copy-Item -Path $file.FullName -Destination $destinationPath -ToSession $session -Force
                  }
              }

          } catch {
              Write-Host "An error occurred: $_"
          } finally {
              # Remove the session after the operations
              Remove-PSSession $session
          }
        shell: pwsh

